with(linalg);
with(LinearAlgebra);
with(ListTools);

read "helpers.txt";

# basic definitions
F:=U->vector([
 vector([U[2],U[3]]),
 vector([U[2]/U[1],U[3]/U[1]])*U[2]+1/2*g*U[1]^2*vector([1,0]),
 vector([U[2]/U[1],U[3]/U[1]])*U[3]+1/2*g*U[1]^2*vector([0,1])
]);

U:=vector([h,v_x*h,v_y*h]);
Uu:=vector([h,u_x,u_y]);

F(U);

# now the jacobian matrix
F_u:=subs({v_x=u_x/h,v_y=u_y/h},eval(F(U)));
mathelper:=(y,x)->col(seq(jacobian(F_u[i],[h,u_x,u_y]),i=1..3)[y],x);
dF_dU:=Matrix(3,3,mathelper);
dF_dU_v:=subs({u_x=v_x*h,u_y=v_y*h},dF_dU);
# splitting to x and y-components, respectively
dF_dU_x:=map(x->x[1],dF_dU_v);
dF_dU_y:=map(x->x[2],dF_dU_v);
Eigenvalues(dF_dU_x);
Eigenvalues(dF_dU_y);

# now discretizing!
phi[1]:=(x,y)->1-2/c*y;
phi[2]:=(x,y)->-1+2/c*x+2/c*y;
phi[3]:=(x,y)->1-2/c*x;

# proving the properties for the basis functions
# integration property
seq(integrate(integrate(phi[i](x,y),x=0..c-y),y=0..c),i=1..3);
# orthogonality
matrix(3,3,[seq(seq(integrate(integrate(phi[i](x,y)*phi[j](x,y),x=0..c-y),y=0..c),i=1..3),j=1..3)]);
# edge-properties
read "basis_functions_edge_properties.txt";
E[1]:=0,0,c,0;
E[2]:=0,c,c,0;
E[3]:=0,0,0,c;
matrix(3,3,[seq(seq(line_integral_over_edge(E[i],phi[j]),i=1..3),j=1..3)]);
matrix(3,3,[seq(seq(line_integral_over_edge(E[k],(sum(phi[i]*phi[j],j=1..3))),i=1..3),k=1..3)]);
# nable properties
matrix(3,3,[seq(seq(integrate(integrate(phi[j](x,y)*diff(phi[i](x,y),x),x=0..c-y),y=0..c),i=1..3),j=1..3)]);
matrix(3,3,[seq(seq(integrate(integrate(phi[j](x,y)*diff(phi[i](x,y),y),x=0..c-y),y=0..c),i=1..3),j=1..3)]);








